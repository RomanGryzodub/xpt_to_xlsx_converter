reticulate::repl_python()
import tkinter as tk
from tkinter import filedialog, ttk
import pandas as pd
import pyreadstat
import threading
import queue
def reset_progress_bar():
progress['value'] = 0
progress_label.config(text="Progress: 0%")
progress.pack(pady=10) # Ensure progress bar is visible
def update_progress(step):
progress['value'] = step
progress_label.config(text=f"Progress: {int((step / progress['maximum']) * 100)}%")
root.update_idletasks()
def select_files():
file_paths = filedialog.askopenfilenames(title="Select Excel Files", filetypes=[("Excel files", "*.xlsx")])
if file_paths:
process_files(file_paths)
def process_files(file_paths):
reset_progress_bar()
total_steps = len(file_paths) * 3
progress['maximum'] = total_steps
current_step = 0
threads = []
for file_path in file_paths:
try:
# Start a new thread for each file
t = threading.Thread(target=process_file, args=(file_path, current_step))
t.start()
threads.append(t)
except Exception as e:
status_messages.put(f"Error with {file_path}: {e}")
current_step += 3
update_progress(current_step)
# Wait for all threads to finish
for t in threads:
t.join()
status_label.config(text="Progress: Completed")
def process_file(file_path, current_step):
try:
# Step 1: Read the Excel file
data = pd.read_excel(file_path)
current_step += 1
update_progress(current_step)
# Step 2: Rename columns
data.columns = [f'COL_{i+1}' for i in range(len(data.columns))]
current_step += 1
update_progress(current_step)
# Step 3: Save to xpt format
xpt_file_path = file_path.rsplit('.', 1)[0] + '.xpt'
pyreadstat.write_xport(data, xpt_file_path)
status_messages.put(f"Converted: {xpt_file_path}")
current_step += 1
update_progress(current_step)
except Exception as e:
status_messages.put(f"Error with {file_path}: {e}")
current_step += 3
update_progress(current_step)
def select_xpt_files():
file_paths = filedialog.askopenfilenames(title="Select XPT Files", filetypes=[("XPT files", "*.xpt")])
if file_paths:
convert_xpt_to_xlsx(file_paths)
def convert_xpt_to_xlsx(file_paths):
reset_progress_bar()
total_steps = len(file_paths) # One step per file
progress['maximum'] = total_steps
current_step = 0
for file_path in file_paths:
try:
# Read the XPT file and save to XLSX format
data, meta = pyreadstat.read_xport(file_path)
xlsx_file_path = file_path.rsplit('.', 1)[0] + '.xlsx'
data.to_excel(xlsx_file_path, index=False)
status_messages.put(f"Converted: {xlsx_file_path}")
current_step += 1
update_progress(current_step)
except Exception as e:
status_messages.put(f"Error with {file_path}: {e}")
current_step += 1
update_progress(current_step)
status_label.config(text="Progress: Completed")
def update_status_label():
while True:
message = status_messages.get()
current_text = status_label.cget("text")
status_label.config(text=current_text + "\n" + message)
status_messages.task_done()
# Set up the tkinter window
root = tk.Tk()
root.title("Excel/XPT Converter")
root.minsize(500, 300)
# Create buttons for selecting files
select_excel_button = tk.Button(root, text="Select Excel Files to Convert to XPT", command=select_files)
select_excel_button.pack(pady=10)
select_xpt_button = tk.Button(root, text="Select XPT Files to Convert to Excel", command=select_xpt_files)
select_xpt_button.pack(pady=10)
# Progress bar and label (initially not visible)
progress = ttk.Progressbar(root, orient=tk.HORIZONTAL, length=450, mode='determinate')
progress_label = tk.Label(root, text="Progress: 0%")
progress_label.pack()  # Pack the progress_label into the window
# Label for showing status
status_label = tk.Label(root, text="", justify=tk.LEFT)
status_label.pack(pady=10)
# Create a Queue for the status messages
status_messages = queue.Queue()
# Start the status label update thread
threading.Thread(target=update_status_label, daemon=True).start()
root.mainloop()
import tkinter as tk
from tkinter import filedialog, ttk
import pandas as pd
import pyreadstat
import threading
import queue
def reset_progress_bar():
progress['value'] = 0
progress_label.config(text="Progress: 0%")
progress.pack(pady=10) # Ensure progress bar is visible
def update_progress(step):
progress['value'] = step
progress_label.config(text=f"Progress: {int((step / progress['maximum']) * 100)}%")
root.update_idletasks()
def select_files():
file_paths = filedialog.askopenfilenames(title="Select Excel Files", filetypes=[("Excel files", "*.xlsx")])
if file_paths:
process_files(file_paths)
def process_files(file_paths):
reset_progress_bar()
total_steps = len(file_paths) * 3
progress['maximum'] = total_steps
current_step = 0
threads = []
for file_path in file_paths:
try:
# Start a new thread for each file
t = threading.Thread(target=process_file, args=(file_path, current_step))
t.start()
threads.append(t)
except Exception as e:
status_messages.put(f"Error with {file_path}: {e}")
current_step += 3
update_progress(current_step)
# Wait for all threads to finish
for t in threads:
t.join()
status_label.config(text="Progress: Completed")
def process_file(file_path, current_step):
try:
# Step 1: Read the Excel file
data = pd.read_excel(file_path)
current_step += 1
update_progress(current_step)
# Step 2: Rename columns
data.columns = [f'COL_{i+1}' for i in range(len(data.columns))]
current_step += 1
update_progress(current_step)
# Step 3: Save to xpt format
xpt_file_path = file_path.rsplit('.', 1)[0] + '.xpt'
pyreadstat.write_xport(data, xpt_file_path)
status_messages.put(f"Converted: {xpt_file_path}")
current_step += 1
update_progress(current_step)
except Exception as e:
status_messages.put(f"Error with {file_path}: {e}")
current_step += 3
update_progress(current_step)
def select_xpt_files():
file_paths = filedialog.askopenfilenames(title="Select XPT Files", filetypes=[("XPT files", "*.xpt")])
if file_paths:
convert_xpt_to_xlsx(file_paths)
def convert_xpt_to_xlsx(file_paths):
reset_progress_bar()
total_steps = len(file_paths) # One step per file
progress['maximum'] = total_steps
current_step = 0
for file_path in file_paths:
try:
# Read the XPT file and save to XLSX format
data, meta = pyreadstat.read_xport(file_path)
xlsx_file_path = file_path.rsplit('.', 1)[0] + '.xlsx'
data.to_excel(xlsx_file_path, index=False)
status_messages.put(f"Converted: {xlsx_file_path}")
current_step += 1
update_progress(current_step)
except Exception as e:
status_messages.put(f"Error with {file_path}: {e}")
current_step += 1
update_progress(current_step)
status_label.config(text="Progress: Completed")
def update_status_label():
while True:
message = status_messages.get()
current_text = status_label.cget("text")
status_label.config(text=current_text + "\n" + message)
status_messages.task_done()
# Set up the tkinter window
root = tk.Tk()
root.title("Excel/XPT Converter")
root.minsize(500, 300)
# Create buttons for selecting files
select_excel_button = tk.Button(root, text="Select Excel Files to Convert to XPT", command=select_files)
select_excel_button.pack(pady=10)
select_xpt_button = tk.Button(root, text="Select XPT Files to Convert to Excel", command=select_xpt_files)
select_xpt_button.pack(pady=10)
# Progress bar and label (initially not visible)
progress = ttk.Progressbar(root, orient=tk.HORIZONTAL, length=450, mode='determinate')
progress_label = tk.Label(root, text="Progress: 0%")
progress_label.pack()  # Pack the progress_label into the window
# Label for showing status
status_label = tk.Label(root, text="", justify=tk.LEFT)
status_label.pack(pady=10)
# Create a Queue for the status messages
status_messages = queue.Queue()
# Start the status label update thread
threading.Thread(target=update_status_label, daemon=True).start()
root.mainloop()
import tkinter as tk
from tkinter import filedialog, ttk
import pandas as pd
import pyreadstat
def center_window(root):
# Calculate position x, y
x = (root.winfo_screenwidth() // 2) - (width // 2)
y = (root.winfo_screenheight() // 2) - (height // 2)
root.geometry(f'{width}x{height}+{x}+{y}')
def select_files():
file_paths = filedialog.askopenfilenames(title="Select Excel Files", filetypes=[("Excel files", "*.xlsx")])
if file_paths:
process_files(file_paths)
def process_files(file_paths):
total_steps = len(file_paths) * 3  # 3 steps per file
progress['maximum'] = total_steps
current_step = 0
status_messages = []
for file_path in file_paths:
try:
# Step 1: Read the Excel file
data = pd.read_excel(file_path)
current_step += 1
update_progress(current_step)
# Step 2: Rename columns
data.columns = [f'COL_{i+1}' for i in range(len(data.columns))]
current_step += 1
update_progress(current_step)
# Step 3: Save to xpt format
xpt_file_path = file_path.rsplit('.', 1)[0] + '.xpt'
pyreadstat.write_xport(data, xpt_file_path)
status_messages.append(f"Converted: {xpt_file_path}")
current_step += 1
update_progress(current_step)
except Exception as e:
status_messages.append(f"Error with {file_path}: {e}")
current_step += 3  # Skip to next file's steps
update_progress(current_step)
# Update status with all messages
status_label.config(text="\n".join(status_messages))
# Update progress bar and label on finish
progress['value'] = progress['maximum']
progress_label.config(text="Progress: Completed")
def update_progress(step):
progress['value'] = step
progress_label.config(text=f"Progress: {int((step / progress['maximum']) * 100)}%")
root.update_idletasks()
# Set up the tkinter window
root = tk.Tk()
root.title("Excel to XPT Converter")
# Center the window and set minimum size
# center_window(root, 500, 300)
root.minsize(500, 300)
# Create a button to select files
select_button = tk.Button(root, text="Select Excel Files", command=select_files)
select_button.pack(pady=20)
# Progress bar
progress = ttk.Progressbar(root, orient=tk.HORIZONTAL, length=450, mode='determinate')
progress.pack(pady=10)
# Progress label
progress_label = tk.Label(root, text="Progress: 0%")
progress_label.pack()
# Label for showing status
status_label = tk.Label(root, text="", justify=tk.LEFT)
status_label.pack(pady=10)
# Run the tkinter event loop
root.mainloop()
reticulate::repl_python()
import tkinter as tk
from tkinter import filedialog, ttk
import pandas as pd
import pyreadstat
def reset_progress_bar():
progress['value'] = 0
progress_label.config(text="Progress: 0%")  # Reset progress text
status_label.config(text="")  # Clear status label before starting a new operation
progress.pack(pady=10)
def update_progress(step, total_steps):
progress['value'] = step
percentage = int((step / total_steps) * 100)
progress_label.config(text=f"Progress: {percentage}%")  # Update text
root.update_idletasks()
def select_files():
file_paths = filedialog.askopenfilenames(title="Select Excel Files", filetypes=[("Excel files", "*.xlsx")])
if file_paths:
reset_progress_bar()
process_files(file_paths)
def process_files(file_paths):
total_steps = len(file_paths) * 3
progress['maximum'] = total_steps
current_step = 0
status_messages = []
for file_path in file_paths:
try:
data = pd.read_excel(file_path)
data.columns = [f'COL_{i+1}' for i in range(len(data.columns))]
xpt_file_path = file_path.rsplit('.', 1)[0] + '.xpt'
pyreadstat.write_xport(data, xpt_file_path)
status_messages.append(f"Converted: {xpt_file_path}")
except Exception as e:
status_messages.append(f"Error with {file_path}: {e}")
finally:
current_step += 3
update_progress(current_step, total_steps)
status_label.config(text="\n".join(status_messages))
progress_label.config(text="Progress: Completed")
def select_xpt_files():
file_paths = filedialog.askopenfilenames(title="Select XPT Files", filetypes=[("XPT files", "*.xpt")])
if file_paths:
reset_progress_bar()
convert_xpt_to_xlsx(file_paths)
def convert_xpt_to_xlsx(file_paths):
total_steps = len(file_paths)
progress['maximum'] = total_steps
current_step = 0
status_messages = []
for file_path in file_paths:
try:
data, meta = pyreadstat.read_xport(file_path)
xlsx_file_path = file_path.rsplit('.', 1)[0] + '.xlsx'
data.to_excel(xlsx_file_path, index=False)
status_messages.append(f"Converted: {xlsx_file_path}")
except Exception as e:
status_messages.append(f"Error with {file_path}: {e}")
finally:
current_step += 1
update_progress(current_step, total_steps)
status_label.config(text="\n".join(status_messages))
progress_label.config(text="Progress: Completed")
# Set up the tkinter window
root = tk.Tk()
root.title("Excel/XPT Converter by Roman Gryzodub")
root.iconbitmap('icon.ico')  # Use raw string for paths on Windows
root.minsize(500, 300)
select_excel_button = tk.Button(root, text="Select Excel Files to Convert to XPT", command=select_files)
select_excel_button.pack(pady=10)
select_xpt_button = tk.Button(root, text="Select XPT Files to Convert to Excel", command=select_xpt_files)
select_xpt_button.pack(pady=10)
progress = ttk.Progressbar(root, orient=tk.HORIZONTAL, length=450, mode='determinate')
progress.pack(pady=10)
progress_label = tk.Label(root, text="Progress: 0%")
progress_label.pack(side=tk.BOTTOM, fill=tk.X)
status_label = tk.Label(root, text="", justify=tk.LEFT)
status_label.pack(pady=10, side=tk.BOTTOM)
root.mainloop()
